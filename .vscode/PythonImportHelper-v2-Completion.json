[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "agno.utils.log",
        "description": "agno.utils.log",
        "isExtraImport": true,
        "detail": "agno.utils.log",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "agno.agent",
        "description": "agno.agent",
        "isExtraImport": true,
        "detail": "agno.agent",
        "documentation": {}
    },
    {
        "label": "SQLTools",
        "importPath": "agno.tools.sql",
        "description": "agno.tools.sql",
        "isExtraImport": true,
        "detail": "agno.tools.sql",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "agno.models.openai",
        "description": "agno.models.openai",
        "isExtraImport": true,
        "detail": "agno.models.openai",
        "documentation": {}
    },
    {
        "label": "AzureOpenAI",
        "importPath": "agno.models.azure",
        "description": "agno.models.azure",
        "isExtraImport": true,
        "detail": "agno.models.azure",
        "documentation": {}
    },
    {
        "label": "SqliteDb",
        "importPath": "agno.db.sqlite",
        "description": "agno.db.sqlite",
        "isExtraImport": true,
        "detail": "agno.db.sqlite",
        "documentation": {}
    },
    {
        "label": "httpx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httpx",
        "description": "httpx",
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "AgentOS",
        "importPath": "agno.os",
        "description": "agno.os",
        "isExtraImport": true,
        "detail": "agno.os",
        "documentation": {}
    },
    {
        "label": "create_sql_agent",
        "importPath": "src.agent.sql_agent",
        "description": "src.agent.sql_agent",
        "isExtraImport": true,
        "detail": "src.agent.sql_agent",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "get_access_token",
        "kind": 2,
        "importPath": "src.agent.sql_agent",
        "description": "src.agent.sql_agent",
        "peekOfCode": "def get_access_token():\n    \"\"\"Get Azure AD access token using client credentials flow.\"\"\"\n    provider = os.getenv(\"MODEL_PROVIDER\", \"openai\").lower()\n    if provider != \"azure\":\n        return \"dummy_token_for_compatibility\"\n    auth = \"https://api.uhg.com/oauth2/token\"\n    scope = \"https://api.uhg.com/.default\"\n    grant_type = \"client_credentials\"\n    client_id = os.getenv(\"AZURE_CLIENT_ID\")\n    client_secret = os.getenv(\"AZURE_CLIENT_SECRET\")",
        "detail": "src.agent.sql_agent",
        "documentation": {}
    },
    {
        "label": "get_model",
        "kind": 2,
        "importPath": "src.agent.sql_agent",
        "description": "src.agent.sql_agent",
        "peekOfCode": "def get_model():\n    \"\"\"\n    Get the AI model based on MODEL_PROVIDER environment variable.\n    Switch between providers by changing MODEL_PROVIDER in .env\n    \"\"\"\n    provider = os.getenv(\"MODEL_PROVIDER\", \"openai\").lower()\n    if provider == \"openai\":\n        api_key = os.getenv(\"OPENAI_API_KEY\")\n        if not api_key:\n            raise ValueError(\"OPENAI_API_KEY is required when MODEL_PROVIDER=openai\")",
        "detail": "src.agent.sql_agent",
        "documentation": {}
    },
    {
        "label": "create_sql_agent",
        "kind": 2,
        "importPath": "src.agent.sql_agent",
        "description": "src.agent.sql_agent",
        "peekOfCode": "def create_sql_agent(db_url=None):\n    \"\"\"\n    Create SQL Server Analysis Agent for AgentOS.\n    This agent is created once at server startup and serves multiple users.\n    User ID and session ID are provided per request by AgentOS.\n    Note: For Azure deployments, the server should be restarted every ~55 minutes\n    to refresh expired tokens, or use OpenAI which has no token expiry.\n    Args:\n        db_url: Optional SQL Server database URL\n    Returns:",
        "detail": "src.agent.sql_agent",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.agent.sql_agent",
        "description": "src.agent.sql_agent",
        "peekOfCode": "logger = logging.getLogger(__name__)\ntiktoken_cache_dir = os.path.abspath(\"tiktoken_cache\")\nos.environ[\"TIKTOKEN_CACHE_DIR\"] = tiktoken_cache_dir\ndef get_access_token():\n    \"\"\"Get Azure AD access token using client credentials flow.\"\"\"\n    provider = os.getenv(\"MODEL_PROVIDER\", \"openai\").lower()\n    if provider != \"azure\":\n        return \"dummy_token_for_compatibility\"\n    auth = \"https://api.uhg.com/oauth2/token\"\n    scope = \"https://api.uhg.com/.default\"",
        "detail": "src.agent.sql_agent",
        "documentation": {}
    },
    {
        "label": "tiktoken_cache_dir",
        "kind": 5,
        "importPath": "src.agent.sql_agent",
        "description": "src.agent.sql_agent",
        "peekOfCode": "tiktoken_cache_dir = os.path.abspath(\"tiktoken_cache\")\nos.environ[\"TIKTOKEN_CACHE_DIR\"] = tiktoken_cache_dir\ndef get_access_token():\n    \"\"\"Get Azure AD access token using client credentials flow.\"\"\"\n    provider = os.getenv(\"MODEL_PROVIDER\", \"openai\").lower()\n    if provider != \"azure\":\n        return \"dummy_token_for_compatibility\"\n    auth = \"https://api.uhg.com/oauth2/token\"\n    scope = \"https://api.uhg.com/.default\"\n    grant_type = \"client_credentials\"",
        "detail": "src.agent.sql_agent",
        "documentation": {}
    },
    {
        "label": "os.environ[\"TIKTOKEN_CACHE_DIR\"]",
        "kind": 5,
        "importPath": "src.agent.sql_agent",
        "description": "src.agent.sql_agent",
        "peekOfCode": "os.environ[\"TIKTOKEN_CACHE_DIR\"] = tiktoken_cache_dir\ndef get_access_token():\n    \"\"\"Get Azure AD access token using client credentials flow.\"\"\"\n    provider = os.getenv(\"MODEL_PROVIDER\", \"openai\").lower()\n    if provider != \"azure\":\n        return \"dummy_token_for_compatibility\"\n    auth = \"https://api.uhg.com/oauth2/token\"\n    scope = \"https://api.uhg.com/.default\"\n    grant_type = \"client_credentials\"\n    client_id = os.getenv(\"AZURE_CLIENT_ID\")",
        "detail": "src.agent.sql_agent",
        "documentation": {}
    },
    {
        "label": "sql_assistant",
        "kind": 5,
        "importPath": "agent_os",
        "description": "agent_os",
        "peekOfCode": "sql_assistant = create_sql_agent()\nagent_os = AgentOS(\n    id=\"sql-server-agent-os\",\n    description=\"SQL Server analysis agent with natural language queries\",\n    agents=[sql_assistant],\n)\napp = agent_os.get_app()\nif __name__ == \"__main__\":\n    port = int(os.getenv(\"AGNO_OS_PORT\", 7777))\n    agent_os.serve(app=\"agent_os:app\", host=\"0.0.0.0\", port=port, reload=True)",
        "detail": "agent_os",
        "documentation": {}
    },
    {
        "label": "agent_os",
        "kind": 5,
        "importPath": "agent_os",
        "description": "agent_os",
        "peekOfCode": "agent_os = AgentOS(\n    id=\"sql-server-agent-os\",\n    description=\"SQL Server analysis agent with natural language queries\",\n    agents=[sql_assistant],\n)\napp = agent_os.get_app()\nif __name__ == \"__main__\":\n    port = int(os.getenv(\"AGNO_OS_PORT\", 7777))\n    agent_os.serve(app=\"agent_os:app\", host=\"0.0.0.0\", port=port, reload=True)",
        "detail": "agent_os",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "agent_os",
        "description": "agent_os",
        "peekOfCode": "app = agent_os.get_app()\nif __name__ == \"__main__\":\n    port = int(os.getenv(\"AGNO_OS_PORT\", 7777))\n    agent_os.serve(app=\"agent_os:app\", host=\"0.0.0.0\", port=port, reload=True)",
        "detail": "agent_os",
        "documentation": {}
    }
]